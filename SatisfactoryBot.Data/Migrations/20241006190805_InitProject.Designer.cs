// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SatisfactoryBot.Data;

#nullable disable

namespace SatisfactoryBot.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241006190805_InitProject")]
    partial class InitProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SatisfactoryBot.Data.Models.DiscordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EntityId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("DiscordEntity");
                });

            modelBuilder.Entity("SatisfactoryBot.Data.Models.DiscordRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DiscordRole");
                });

            modelBuilder.Entity("SatisfactoryBot.Data.Models.SatisfactoryServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscordEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefaultServer")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Owner")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEntityId");

                    b.ToTable("SatisfactoryServer");
                });

            modelBuilder.Entity("SatisfactoryBot.Data.Models.DiscordRole", b =>
                {
                    b.HasOne("SatisfactoryBot.Data.Models.DiscordEntity", "DiscordEntity")
                        .WithMany("DiscordRoles")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DiscordEntity");
                });

            modelBuilder.Entity("SatisfactoryBot.Data.Models.SatisfactoryServer", b =>
                {
                    b.HasOne("SatisfactoryBot.Data.Models.DiscordEntity", "DiscordEntity")
                        .WithMany("SatisfactoryServers")
                        .HasForeignKey("DiscordEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordEntity");
                });

            modelBuilder.Entity("SatisfactoryBot.Data.Models.DiscordEntity", b =>
                {
                    b.Navigation("DiscordRoles");

                    b.Navigation("SatisfactoryServers");
                });
#pragma warning restore 612, 618
        }
    }
}
